// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         BigInt @id @default(autoincrement())
  firstName  String @db.VarChar(100)
  middleName String @db.VarChar(100)
  lastName   String @db.VarChar(100)
  mobile     String @db.VarChar(100)
  email      String @db.VarChar(100)
  password   String @db.VarChar(100)
  admin      Int    @db.TinyInt

  registerAt DateTime? @db.Timestamp(0)
  lastLogin  DateTime? @db.Timestamp(0)
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  updatedAt  DateTime? @updatedAt @db.Timestamp(0)

  cart  cart[]
  order order[]
}

model cart {
  id BigInt @id @default(autoincrement())

  sessionId  String    @db.VarChar(100)
  token      String    @db.VarChar(100)
  title      String    @db.VarChar(100)
  firstName  String    @db.VarChar(100)
  middleName String    @db.VarChar(100)
  lastName   String    @db.VarChar(100)
  mobile     String    @db.VarChar(100)
  email      String    @db.VarChar(100)
  city       String    @db.VarChar(100)
  country    String    @db.VarChar(100)
  status     String    @db.VarChar(100)
  userId     BigInt?
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  updatedAt  DateTime? @updatedAt @db.Timestamp(0)

  user user? @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model order {
  id BigInt @id @default(autoincrement())

  token        String @db.VarChar(100)
  subTotal     Float  @db.Double
  itemDiscount Float  @db.Double
  tax          Float  @db.Double
  total        Float  @db.Double
  discount     Float  @db.Double
  grandTotal   Float  @db.Double
  title        String @db.VarChar(100)
  firstName    String @db.VarChar(100)
  middleName   String @db.VarChar(100)
  lastName     String @db.VarChar(100)
  mobile       String @db.VarChar(100)
  email        String @db.VarChar(100)
  city         String @db.VarChar(100)
  country      String @db.VarChar(100)

  userId    BigInt?
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @updatedAt @db.Timestamp(0)

  user user? @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model category {
  id        BigInt    @id @default(autoincrement())
  title     String    @db.VarChar(255)
  metaTitle String    @db.VarChar(255)
  slug      String    @db.VarChar(255)
  content   String    @db.Text
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @updatedAt @db.Timestamp(0)
  product   product[]
}

model product {
  id          BigInt    @id @default(autoincrement())
  categoryId  BigInt
  name        String    @db.VarChar(100)
  metaTitle   String    @db.VarChar(100)
  slug        String    @db.VarChar(100)
  summary     String    @db.VarChar(255)
  price       Float     @db.Double
  discount    Float     @db.Double
  publishedAt DateTime? @db.Timestamp(0)
  startsAt    DateTime? @db.Timestamp(0)
  endsAt      DateTime? @db.Timestamp(0)
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime? @updatedAt @db.Timestamp(0)

  product_meta   product_meta[]
  product_review product_review[]
  category       category         @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_meta {
  id        BigInt  @id @default(autoincrement())
  productId BigInt?
  key       String  @db.VarChar(100)
  content   String  @db.VarChar(255)

  product product? @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @updatedAt @db.Timestamp(0)
}

model product_review {
  id        BigInt  @id @default(autoincrement())
  productId BigInt?

  title   String @db.VarChar(100)
  rating  Float  @db.Float
  content String @db.VarChar(255)

  product product? @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @updatedAt @db.Timestamp(0)
}
